/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LocationsIndexRouteImport } from './routes/locations/index'
import { Route as AddIndexRouteImport } from './routes/add/index'
import { Route as LocationsLocationIndexRouteImport } from './routes/locations/$location/index'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsIndexRoute = LocationsIndexRouteImport.update({
  id: '/locations/',
  path: '/locations/',
  getParentRoute: () => rootRouteImport,
} as any)
const AddIndexRoute = AddIndexRouteImport.update({
  id: '/add/',
  path: '/add/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsLocationIndexRoute = LocationsLocationIndexRouteImport.update({
  id: '/locations/$location/',
  path: '/locations/$location/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/add': typeof AddIndexRoute
  '/locations': typeof LocationsIndexRoute
  '/locations/$location': typeof LocationsLocationIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/add': typeof AddIndexRoute
  '/locations': typeof LocationsIndexRoute
  '/locations/$location': typeof LocationsLocationIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/add/': typeof AddIndexRoute
  '/locations/': typeof LocationsIndexRoute
  '/locations/$location/': typeof LocationsLocationIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/test' | '/add' | '/locations' | '/locations/$location'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/test' | '/add' | '/locations' | '/locations/$location'
  id:
    | '__root__'
    | '/'
    | '/test'
    | '/add/'
    | '/locations/'
    | '/locations/$location/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TestRoute: typeof TestRoute
  AddIndexRoute: typeof AddIndexRoute
  LocationsIndexRoute: typeof LocationsIndexRoute
  LocationsLocationIndexRoute: typeof LocationsLocationIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations/': {
      id: '/locations/'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add/': {
      id: '/add/'
      path: '/add'
      fullPath: '/add'
      preLoaderRoute: typeof AddIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations/$location/': {
      id: '/locations/$location/'
      path: '/locations/$location'
      fullPath: '/locations/$location'
      preLoaderRoute: typeof LocationsLocationIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TestRoute: TestRoute,
  AddIndexRoute: AddIndexRoute,
  LocationsIndexRoute: LocationsIndexRoute,
  LocationsLocationIndexRoute: LocationsLocationIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
